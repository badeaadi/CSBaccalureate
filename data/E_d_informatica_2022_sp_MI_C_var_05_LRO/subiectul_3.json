{
    "subject_number": "III",
    "total_points": "30",
    "subject_title": "SUBIECTUL al III-lea",
    "exercises": {
        "1": {
            "content": "Subprogramul schimb are trei parametri:\n• n şi x, prin care primeşte câte un număr natural (n∈[0,108], x∈[1,9]);\n• p, prin care primește un număr natural reprezentând poziția unei cifre a numărului n (0≤p). Pozițiile\ncifrelor sunt numerotate de la dreapta la stânga, astfel: cifra unităților este pe poziția 0, cifra zecilor\neste pe poziția 1 ș.a.m.d.\nSubprogramul transformă numărul n, înlocuind cifra de pe poziția p cu cifra x, și furnizează numărul\nobținut tot prin parametrul n. Scrieţi definiţia completă a subprogramului.\nExemplu: dacă n=12587, x=6 și p=3, după apel, n=16587. (10p.)",
            "exercise_number": "1"
        },
        "2": {
            "content": "Se consideră o vocală oarecare a alfabetului englez, notată cu v, și o consoană oarecare a alfabetului englez,\nnotată cu c. Litera v se numeşte vocală prietenă a lui c dacă în şirul literelor alfabetului englez, ordonat\nlexicografic, v îl precede pe c, iar între v și c nu există nicio vocală. Se consideră vocale literele a, e, i, o, u.\nExemplu: e este vocală prietenă pentru consoanele f, g și h, dar nu este vocală prietenă pentru\nconsoanele d și j.\nUn elev vrea să transmită unui prieten o parolă, codificată. Parola este formată dintr-un singur cuvânt de\ncel mult 50 de caractere, litere mici ale alfabetului englez, cel puțin una fiind consoană. Codificarea se\nface prin înlocuirea fiecărei consoane cu vocala sa prietenă, ca în exemplu.\nScrieţi un program C/C++ care citeşte de la tastatură un cuvânt, reprezentând o parolă de tipul precizat şi\ndetermină, în memorie, forma codificată a acesteia. Programul afişează pe ecran parola codificată obţinută.\nExemplu: pentru parola rame se afişează oaie, iar pentru parola sport se afișează ooooo (10p.)",
            "exercise_number": "2"
        },
        "3": {
            "content": "Numim secvență paritară a unui șir de numere naturale un subșir al acestuia, format din termeni cu\naceeași paritate, aflați pe poziții consecutive în șirul dat. Lungimea secvenței este egală cu numărul de\ntermeni ai acesteia.\nFișierul bac.txt conține un șir de cel puțin două și cel mult 106 numere naturale din intervalul [0, 109].\nNumerele sunt separate prin câte un spațiu, iar în șir există cel puțin doi termeni cu aceeași paritate pe\npoziții consecutive.\nSe cere să se afişeze pe ecran numărul secvențelor paritare de lungime maximă din șirul aflat în fișier,\nprecum și această lungime maximă. Numerele afişate sunt separate printr-un spațiu. Proiectați un\nalgoritm eficient din punctul de vedere al timpului de executare și al memoriei utilizate.\nExemplu: dacă fişierul conţine numerele\n2 3 5 1 7 9 8 4 4 11 15 17 21 11 6 11 15 17 21 11 6 5 2 6 4 0 16\natunci pe ecran se afișează valorile 4 5\na. Descrieți în limbaj natural algoritmul proiectat, justificând eficiența acestuia. (2p.)\nb. Scrieți programul C/C++ corespunzător algoritmului proiectat. (8p.)",
            "exercise_number": "3"
        }
    }
}