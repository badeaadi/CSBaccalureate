{
    "gpt_model": "E_d_Informatica_2020_sp_MI_C_var_06_LRO",
    "gpt_response": {
        "id": "chatcmpl-BH2wWvj1T1WqDNcaiCavWuXeQJbjn",
        "model": "gpt-4.5-preview-2025-02-27",
        "object": "chat.completion",
        "choices": [
            {
                "finish_reason": "stop",
                "index": 0,
                "message": {
                    "content": "## Subiectul I - Exercitiul 1\n\nAnalizăm expresia: `3 + 5.0 / 2 + 2`\n\n- Împărțirea are prioritate: `5.0 / 2 = 2.5`\n- Apoi adunările: `3 + 2.5 + 2 = 7.5`\n\nRăspuns corect: d. 7.5\n\n---\n\n## Subiectul I - Exercitiul 2\n\nAnalizăm subprogramul:\n\n```cpp\nvoid f(int i, int v[4]) {\n    if(i >= 3) v[i] = v[i] + 1;\n    else f(i + 1, v);\n    cout << v[i];\n}\n```\n\nDorim să afișăm `2020` la apelul `f(0,v)`.\n\n- Observăm că afișarea se face după apelul recursiv, deci afișarea va fi în ordine inversă: `v[3] v[2] v[1] v[0]`.\n- Deci avem: `v[3]=2, v[2]=0, v[1]=2, v[0]=0`.\n- Inițial, înainte de apel, `v[3]` era cu 1 mai mic (deoarece se incrementează în apelul cu `i=3`), deci inițial `v[3]=1`.\n\nAstfel, tabloul inițial este: `0,2,0,1`.\n\nRăspuns corect: b. 0,2,0,1\n\n---\n\n## Subiectul I - Exercitiul 3\n\nAvem primele soluții generate prin backtracking:\n\n1. (70,60,40,30)\n2. (70,60,50,20)\n3. (80,50,40,30)\n4. (80,60,40,20)\n\nContinuăm generarea în ordine descrescătoare, respectând condițiile:\n\n- A 5-a soluție: (80,60,50,10)\n- A 6-a soluție: (80,70,30,20)\n\nRăspuns corect: c. (80,70,30,20)\n\n---\n\n## Subiectul I - Exercitiul 4\n\nAvem vectorul de tați: `(7,5,6,5,7,0,6,3,3,8)` pentru nodurile 1-10.\n\n- Nodurile care nu apar ca tată sunt frunze.\n- Nodurile care apar ca tată sunt: 7,5,6,3,8.\n- Nodurile frunză sunt cele care nu apar ca tată: 1,2,4,9,10.\n\nAvem 5 frunze.\n\nRăspuns corect: c. 5\n\n---\n\n## Subiectul I - Exercitiul 5\n\nAvem graful cu matricea de adiacență:\n\n```\n0 1 0 1 1\n1 0 1 0 0\n0 1 0 1 0\n1 0 1 0 0\n1 0 0 0 0\n```\n\n- Graful are 5 noduri și 5 muchii.\n- Un graf parțial conex diferit de cel dat se obține eliminând cel puțin o muchie, dar păstrând conexitatea.\n- Trebuie să numărăm câte subgrafuri conexe diferite putem obține eliminând muchii.\n\nAnalizând atent, găsim exact 8 grafuri parțiale conexe diferite.\n\nRăspuns corect: c. 8\n\n---\n\n## Subiectul II - Exercitiul 1\n\n### a.\n\nPentru numărul `240107`, algoritmul verifică dacă cifrele pare (0,2,4,6,8) apar în număr și afișează 1 dacă apar, 0 altfel.\n\n- 0 apare → 1\n- 2 apare → 1\n- 4 apare → 1\n- 6 nu apare → 0\n- 8 nu apare → 0\n\nSe afișează: `1 1 1 0 0`\n\n### b.\n\nCel mai mic număr din intervalul `[100000,1000000)` cu cifre distincte și care conține toate cifrele pare (0,2,4,6,8) este: `102468`.\n\nCel mai mare număr cu aceste proprietăți este: `986420`.\n\n### c.\n\nProgramul C++ corespunzător algoritmului:\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int a, c = 0;\n    cin >> a;\n    do {\n        int b = a, x = 0;\n        do {\n            if(b % 10 == c) x = 1;\n            b /= 10;\n        } while(b != 0 && x == 0);\n        cout << x << ' ';\n        c += 2;\n    } while(c <= 9);\n    return 0;\n}\n```\n\n### d.\n\nPseudocod echivalent folosind structura `cat timp`:\n\n```\ncitește a\nc ← 0\ncat timp c ≤ 9 execută\n    b ← a; x ← 0\n    cat timp b ≠ 0 și x = 0 execută\n        dacă b%10 = c atunci x ← 1\n        b ← [b/10]\n    sfârșit cat timp\n    scrie x, ' '\n    c ← c + 2\nsfârșit cat timp\n```\n\n---\n\n## Subiectul II - Exercitiul 2\n\nDefiniția structurii și declararea variabilei:\n\n```cpp\nstruct calculator {\n    char monitor;\n    struct {\n        int interna;\n        int externa;\n    } memorie;\n} c;\n```\n\n---\n\n## Subiectul II - Exercitiul 3\n\nSecvența completată corect:\n\n```cpp\nfor(i=0;i<9;i++)\n    for(j=0;j<9;j++)\n        if(i+j>=9) a[i][j]='<';\n        else a[i][j]='>';\n```\n\n---\n\n## Subiectul III - Exercitiul 1\n\nSubprogramul care returnează suma divizorilor comuni:\n\n```cpp\nint suma(int a, int b) {\n    int s = 0;\n    for(int d = 1; d <= min(a,b); d++)\n        if(a % d == 0 && b % d == 0)\n            s += d;\n    return s;\n}\n```\n\n---\n\n## Subiectul III - Exercitiul 2\n\nProgramul care rotește spre stânga cuvintele de cel puțin 3 litere:\n\n```cpp\n#include <iostream>\n#include <cstring>\nusing namespace std;\n\nint main() {\n    char s[101], *p, rez[101]=\"\";\n    bool exista=false;\n    cin.getline(s,101);\n    p=strtok(s,\" \");\n    while(p) {\n        if(strlen(p)>=3) {\n            exista=true;\n            char aux[101];\n            strcpy(aux,p+1);\n            aux[strlen(p)-1]=p[0];\n            aux[strlen(p)]='\\0';\n            strcat(rez,aux);\n        } else strcat(rez,p);\n        strcat(rez,\" \");\n        p=strtok(NULL,\" \");\n    }\n    if(exista) cout<<rez;\n    else cout<<\"nu exista\";\n    return 0;\n}\n```\n\n---\n\n## Subiectul III - Exercitiul 3\n\n### a.\n\nAlgoritmul eficient:\n\n- Numărăm aparițiile fiecărui număr.\n- Un șir poate fi palindromic dacă cel mult un număr are frecvență impară.\n- Complexitatea este O(n), eficientă pentru n ≤ 10^6.\n\n### b.\n\nProgramul C++:\n\n```cpp\n#include <iostream>\n#include <fstream>\nusing namespace std;\n\nint f[1001], x, impar=0;\n\nint main() {\n    ifstream fin(\"bac.in\");\n    while(fin>>x) f[x]++;\n    for(int i=1;i<=1000;i++)\n        if(f[i]%2) impar++;\n    if(impar<=1) cout<<\"DA\";\n    else cout<<\"NU\";\n    return 0;\n}\n```",
                    "role": "assistant"
                }
            }
        ],
        "created": 1743402588,
        "usage": {
            "completion_tokens": 1807,
            "prompt_tokens": 2466,
            "total_tokens": 4273,
            "cache_read_input_tokens": 0
        }
    },
    "temp": 0.0,
    "results": {
        "I": {
            "1": "Analizăm expresia: `3 + 5.0 / 2 + 2`  - Împărțirea are prioritate: `5.0 / 2 = 2.5` - Apoi adunările: `3 + 2.5 + 2 = 7.5`  Răspuns corect: d. 7.5",
            "2": "Analizăm subprogramul:  ```cpp void f(int i, int v[4]) {     if(i >= 3) v[i] = v[i] + 1;     else f(i + 1, v);     cout << v[i]; } ```  Dorim să afișăm `2020` la apelul `f(0,v)`.  - Observăm că afișarea se face după apelul recursiv, deci afișarea va fi în ordine inversă: `v[3] v[2] v[1] v[0]`. - Deci avem: `v[3]=2, v[2]=0, v[1]=2, v[0]=0`. - Inițial, înainte de apel, `v[3]` era cu 1 mai mic (deoarece se incrementează în apelul cu `i=3`), deci inițial `v[3]=1`.  Astfel, tabloul inițial este: `0,2,0,1`.  Răspuns corect: b. 0,2,0,1",
            "3": "Avem primele soluții generate prin backtracking:  1. (70,60,40,30) 2. (70,60,50,20) 3. (80,50,40,30) 4. (80,60,40,20)  Continuăm generarea în ordine descrescătoare, respectând condițiile:  - A 5-a soluție: (80,60,50,10) - A 6-a soluție: (80,70,30,20)  Răspuns corect: c. (80,70,30,20)",
            "4": "Avem vectorul de tați: `(7,5,6,5,7,0,6,3,3,8)` pentru nodurile 1-10.  - Nodurile care nu apar ca tată sunt frunze. - Nodurile care apar ca tată sunt: 7,5,6,3,8. - Nodurile frunză sunt cele care nu apar ca tată: 1,2,4,9,10.  Avem 5 frunze.  Răspuns corect: c. 5",
            "5": "Avem graful cu matricea de adiacență:  ``` 0 1 0 1 1 1 0 1 0 0 0 1 0 1 0 1 0 1 0 0 1 0 0 0 0 ```  - Graful are 5 noduri și 5 muchii. - Un graf parțial conex diferit de cel dat se obține eliminând cel puțin o muchie, dar păstrând conexitatea. - Trebuie să numărăm câte subgrafuri conexe diferite putem obține eliminând muchii.  Analizând atent, găsim exact 8 grafuri parțiale conexe diferite.  Răspuns corect: c. 8"
        },
        "II": {
            "1": "### a.  Pentru numărul `240107`, algoritmul verifică dacă cifrele pare (0,2,4,6,8) apar în număr și afișează 1 dacă apar, 0 altfel.  - 0 apare → 1 - 2 apare → 1 - 4 apare → 1 - 6 nu apare → 0 - 8 nu apare → 0  Se afișează: `1 1 1 0 0`  ### b.  Cel mai mic număr din intervalul `[100000,1000000)` cu cifre distincte și care conține toate cifrele pare (0,2,4,6,8) este: `102468`.  Cel mai mare număr cu aceste proprietăți este: `986420`.  ### c.  Programul C++ corespunzător algoritmului:  ```cpp #include <iostream> using namespace std;  int main() {     int a, c = 0;     cin >> a;     do {         int b = a, x = 0;         do {             if(b % 10 == c) x = 1;             b /= 10;         } while(b != 0 && x == 0);         cout << x << ' ';         c += 2;     } while(c <= 9);     return 0; } ```  ### d.  Pseudocod echivalent folosind structura `cat timp`:  ``` citește a c ← 0 cat timp c ≤ 9 execută     b ← a; x ← 0     cat timp b ≠ 0 și x = 0 execută         dacă b%10 = c atunci x ← 1         b ← [b/10]     sfârșit cat timp     scrie x, ' '     c ← c + 2 sfârșit cat timp ```",
            "2": "Definiția structurii și declararea variabilei:  ```cpp struct calculator {     char monitor;     struct {         int interna;         int externa;     } memorie; } c; ```",
            "3": "Secvența completată corect:  ```cpp for(i=0;i<9;i++)     for(j=0;j<9;j++)         if(i+j>=9) a[i][j]='<';         else a[i][j]='>'; ```"
        },
        "III": {
            "1": "Subprogramul care returnează suma divizorilor comuni:  ```cpp int suma(int a, int b) {     int s = 0;     for(int d = 1; d <= min(a,b); d++)         if(a % d == 0 && b % d == 0)             s += d;     return s; } ```",
            "2": "Programul care rotește spre stânga cuvintele de cel puțin 3 litere:  ```cpp #include <iostream> #include <cstring> using namespace std;  int main() {     char s[101], *p, rez[101]=\"\";     bool exista=false;     cin.getline(s,101);     p=strtok(s,\" \");     while(p) {         if(strlen(p)>=3) {             exista=true;             char aux[101];             strcpy(aux,p+1);             aux[strlen(p)-1]=p[0];             aux[strlen(p)]='\\0';             strcat(rez,aux);         } else strcat(rez,p);         strcat(rez,\" \");         p=strtok(NULL,\" \");     }     if(exista) cout<<rez;     else cout<<\"nu exista\";     return 0; } ```",
            "3": "### a.  Algoritmul eficient:  - Numărăm aparițiile fiecărui număr. - Un șir poate fi palindromic dacă cel mult un număr are frecvență impară. - Complexitatea este O(n), eficientă pentru n ≤ 10^6.  ### b.  Programul C++:  ```cpp #include <iostream> #include <fstream> using namespace std;  int f[1001], x, impar=0;  int main() {     ifstream fin(\"bac.in\");     while(fin>>x) f[x]++;     for(int i=1;i<=1000;i++)         if(f[i]%2) impar++;     if(impar<=1) cout<<\"DA\";     else cout<<\"NU\";     return 0; } ```"
        }
    },
    "barem_url": "https://info-hobby.ro/wp-content/uploads/2020/06/E_d_Informatica_2020_sp_MI_bar_06.pdf",
    "exam": {
        "title": "gpt-4.5-preview",
        "subject": "Informatica",
        "categories": [
            "Filiera teoretică - Profilul real"
        ]
    }
}